{{ template "base" .}}

{{ define "title"}}
Virtual Terminal 
{{ end }}

{{ define "content" }}
<h2 class="mt-3 text-center">Virtual Terminal</h2>
<hr>
<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form action="/payment-succeeded" method="post" name="charge_form" id="charge_form" class="d-block needs-validation" autocomplete="off" novalidate="">
    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount" required="" autocomplete="amount-new">
    </div>
    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required="" autocomplete="cardholder-name-new">
    </div>
    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Cardholder E-mail</label>
        <input type="email" class="form-control" id="cardholder-email" name="cardholder_email" required="" autocomplete="cardholder-email-new">
    </div>

    <div class="mb-3">
        <label for="card-element" class="form-label">Credit card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
        <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>
    <hr>
    <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="val()">Charge Card</a>
    <div class="text-center d-none" id="processing-payment">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">

</form>

{{ end }}

{{ define "js" }}
<script src="https://js.stripe.com/v3"></script>
<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById('card-messages');
    const payButton = document.getElementById('pay-button');
    const processing = document.getElementById('processing-payment');
    const cardSuccess = document.getElementById('card-success');
    stripe = Stripe('pk_test_51RAiiJQIYevZnwnf6k5vtRV78yxyQfnTaGfRJ4C6aShdwPF0jYyZaf33WivHo2XMW2ODZUSGGbya0qZ58KL2oYYm00fWUTFAD9');

    function hidePayButton() { 
        payButton.classList.add('d-none');
        processing.classList.remove('d-none');
     }

    function val() {
        let form = document.getElementById('charge_form')
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        form.classList.add('was-validated');
        hidePayButton();

        let amountToCharge = String(parseFloat(document.getElementById('amount').value) * 100)
        let payload = {
            amount: amountToCharge,
            currency: 'usd',
        }
        const requestOptions = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'content-type': 'application/json',
            },
            body: JSON.stringify(payload),
        }
        fetch("http://localhost:4001/api/payment_intent", requestOptions)
            .then(response => response.json())
            .then(response => {
                let data;
                try {
                    data = JSON.parse(response);
                    stripe.confirmCardPayment(data.client_secret, {
                        card: card,
                        billing_details: {
                            name: document.getElementById('cardholder-name').value,
                        }
                    }).then(function(result) {
                        if (result.error) {
                            showError(result.error.message);
                            showPayButton();
                        } else if (result.paymentIntent) {
                            if (result.paymentIntent.status === 'succeeded')
                                document.getElementById('payment_method').value = result.paymentIntent.payment_method_types[0];
                                document.getElementById('payment_intent').value = result.paymentIntent.id;
                                document.getElementById('payment_amount').value = result.paymentIntent.amount;
                                document.getElementById('payment-currency').value = result.paymentIntent.currency;
                                processing.classList.add('d-none');
                                showCardSuccess();
                            }
                        }
                    })
                } catch (err) {
                    console.log(err);
                    showCardError("Invalid response from payment gateway.")
                }
            })
    }
    
    (function() {
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px',
            }
        };
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount('#card-element');

        card.addEventListener('change', function(event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        });
    })();
</script>
{{ end }}